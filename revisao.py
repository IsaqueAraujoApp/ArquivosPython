import math#LISTA 1#EXE 1#int, int -> intdef areaRet(L1,L2):    return L1*L2#EXE 2#int, int -> int, intdef DivRest(Dividendo, Divisor):    return Dividendo/Divisor, Dividendo%Divisor#EXE 3#int, int, int, intdef CalcOrdenada(a,b,c, abscissa):    return (a*abscissa**2)+b*abscissa+c#EXE 4#int -> intdef ValorGorjeta(valor):    return valor*0.1#EXE 5#int, int -> intdef MediaDoisNumeros(x1,x2):    return (x1+x2)/2.0#EXE 6#int, int, int, int -> intdef MediaPonderada(x1,p1,x2,p2):    return (x1*p1+x2*p2)/(p1+p2)#EXE 7#int, int -> floatdef AreaCoroaCircular(r1,r2):    return (r1**2*3.14)-(r2**2*3.14)#EXE 8#float, float, float -> floatdef DistanciaCorrenteza(Vc, Lr, Vb):    return (Vc*Lr)/(Vb*1.0)#EXE 9#float, int, float -> floatdef SaldoFinal(ValorConta, meses, taxa):    return ValorConta*(1+(taxa/100.0)*meses)#EXE 10#float -> float#Revisar essadef ErrorPG(q):    return 1 / (1 - q) - (1 + q + q * q)#EXE 11#float, int -> floatdef ValorParaCada(Conta, pessoas):    valorgorjeta = Conta*0.1    return (Conta+valorgorjeta)/(1.0*pessoas)#EXE 12#float -> floatdef AreaCubo(c):    return (c**2)*6#LISTA 2#EXE1#float, float, float -> floatdef Delta(a,b,c):    return b**2-4*a*c#EXE2#float, float, float -> floatdef Equacao2(a,b,c):    x1 = ((-1*b)+(Delta(a,b,c))**(1/2.0))/(2.0*a)    x2 = ((-1*b)-(Delta(a,b,c))**(1/2.0))/(2.0*a)    return x1, x2#EXE 3#float, float -> floatdef AreaSetorCircular(raio, angulo = 360):    return (math.radians(angulo)*math.pi*raio**2)/math.radians(360)#EXE 4#float, float, float -> intdef numerosTermosPA(Vinicial, Vfinal, razao):    return (Vfinal-Vinicial+razao)/(razao*1.0)#float, float, float -> floatdef SomaPA(Vinicial, Vfinal, razao):    return ((Vinicial+Vfinal)*numerosTermosPA(Vinicial, Vfinal, razao))/2.0#EXE 5#float -> floatdef ComprimentoCirculo(r):    return 2*math.pi*r#EXE 6#float, float -> floatdef NumeroVoltas(r, d):    return d/ComprimentoCirculo(r)#EXE 7 a#float, float -> floatdef Hipotenusa(cat1, cat2):    return math.sqrt(cat1**2+cat2**2)#EXE 7 b#float, float, float, float -> floatdef DistanciaDoisPontos(x1,x2,y1,y2):    return math.sqrt((x2-x1)**2+(y2-y1)**2)#EXE 7 c#float, float -> floatdef PerimetroTRI(cat1,cat2):    return cat1+cat2+math.sqrt(cat1**2+cat2**2)#EXE 7 d#float -> intdef SomaSenoCosseno2(angulo):    return math.sin(math.radians(angulo))**2+math.cos(math.radians(angulo))**2#EXE 8#float, float -> floatdef AlturaAviao(d,angulo):    return math.tan(math.radians(angulo))*d#LISTA 3#EXE 1#string, string -> stringdef UnePalavraMultiplica(a,b):    return (a+b)*3#EXE 2#float, float, float -> stringdef QuantRaizes2(a,b,c):    delta = b**2-4*a*c    if delta > 0:        return "Essa equacao possui duas raizes"    elif delta == 0:        return "Essa equacao possui uma raiz"    else:        return "Essa equacao nao possui raizes"#EXE 3#float, float, float -> floatdef MaiorEntre3(a,b,c):    x1 = 0;    if(a >= b):        x1 = b    elif(a <= b):        x1 = a    if(c >= x1):        return x1    else:        return c#EXE 4#float, float, float -> stringdef ClassificaTRI(a,b,c):    if a == b == c:        return "Equilatero"    elif a != b != c:        return "Escaleno"    else:        return "Isosceles"#EXE 5#int -> floatdef PrecoMaca(n):    if n <=0:        return "Nenhuma maca foi comprada"    elif n < 12:        return "R$ "+ str(n*0.30)    else:        return "R$ "+ str(n*0.25)#EXE 6#int -> booleandef Bissexto(ano):    if ano%100!=0 and ano%4==0 or ano%400==0:        return True    else:        return False#EXE 7#int, int, int -> stringdef Data(dia, mes, ano):    if ano < 0:        return "Data Invalida"    elif mes < 0 or mes > 12:        return "Data Invalida"    elif dia < 1 or dia > 31:        return "Data Invalida"    elif mes == 1 or mes == 3 or mes == 5 or mes == 7 or mes == 8 or mes == 10 or mes == 12:        return "Data Valida"    elif mes == 2 and Bissexto(ano) == False and dia > 28:        return "Data Invalida"    elif mes == 2 and Bissexto(ano) == True and dia > 28 and dia < 30:        return "Data Valida"    elif mes == 2 and dia > 29:        return "Data Invalida"    else:        if dia > 30:            return "Data Invalida"        else:            return "Data Valida"#EXE 8#float, float, float -> floatdef MediaFinal(p1,p2,p3,nt):    media = ((p1+p2+p3-MaiorEntre3(p1,p2,p3))/2)*0.8+nt*0.2    if media >= 5:        return "Aprovado"    else:        return "Reprovado"#LISTA 4#EXE 1#string -> stringdef PosicaoImpar(s):    return s[1::2]#EXE 2#string -> stringdef RetornaMeio(s):    if len(s)%2 == 0:        return s[len(s)/2-1:len(s)/2+1]    else:        return s[len(s)/2:len(s)/2+1]#EXE 3#string, string -> string, stringdef JuntaString(s1,s2):    if len(s1) < 5 or len(s2) < 5:        return "A string tem que ter pelo menos 5 caracteres"    else:        return s1[2:]+s2[:len(s2)-3]#EXE 4#string, string, int -> stringdef SubstituiLetra(s,letra, n):    part1 = s[:n]    part2 = s[n+1:]    return part1+letra+part2#EXE 5#string -> stringdef MeioDelaMesma(s):    if len(s)%2 == 0:        return s[:len(s)/2]*2+s[len(s)/2:]*2    else:        return s[:len(s)/2]*2+s[len(s)/2:]*2#EXE 6#string -> stringdef JogoDaVelha(s):    if len(s)%2 == 0:        return "#"+s[:len(s)/2]+"#"+s[len(s)/2:]+"#"    else:        return "#"+s[:len(s)/2]+"#"+s[len(s)/2:]+"#"#EXE 7#string -> stringdef Rotacionar3(s):    parte1 = s[:len(s)-3]    parte2 = s[len(s)-3:]    return parte2+parte1#EXE 8#string -> stringdef Rotacionar(s, n):    parte1 = s[:len(s)-n]    parte2 = s[len(s)-n:]    return parte2+parte1#EXE 9#string, string -> intdef ContaDias(data1, data2):    dia1 = data1[:2]    mes1 = data1[3:5]    ano1 = data1[7:]    dia2 = data2[:2]    mes2 = data2[3:5]    ano2 = data2[7:]    dias = int(dia2)-int(dia1)    diasmes = (int(mes2)-int(mes1))*30    diascomanos = (int(ano2)-int(ano1))*30*12    return diascomanos+diasmes+dias#LISTA 5#EXE 1#string -> stringdef MaisculaContrario(s):    return str.upper(s[::-1])#string -> tupledef TuplaComVogal(s):    vogala = s.upper().count("A")    vogale = s.upper().count("E")    vogali = s.upper().count("I")    vogalo = s.upper().count("O")    vogalu = s.upper().count("U")    return vogala, vogale, vogali, vogalo, vogalu#string, string -> intdef SegundaOcorrencia(s, letra):    if s.count(letra) < 2:        return "Existe menos que duas ocorrencias da letra escolhida"    else:        indice = s.index(letra)        return str.index(s, letra, indice+1)#string -> intdef NumeroDePalavras(s):    return len(str.split(s))#tuple, tuple -> tupledef UneTupla(tupla1, tupla2):    if len(tupla1) > len(tupla2):        return tupla1[0],tupla2[len(tupla2)-1]    elif len(tupla2) > len(tupla1):        return tupla2[0],tupla1[len(tupla1)-1]#string -> stringdef JogoDaVelha(s):    return str.join("#", str.split(s," "))#list, list -> listdef IntercalaLista(L1, L2):    i = 0    lista = []    while i < 3:        lista.append(L1[i])        lista.append(L2[i])        i+=1    return lista#list, list -> listdef IntercalaLista(L1, L2):    lista = []    i = 0    tupla = L1[0],L2[0],L1[1],L2[1],L1[2],L2[2]    while i < len(tupla):        lista.append(tupla[i:i+2])        i+=2    return lista#int, int -> listdef RetornaLista(n, m):    lista = range(1,n+1)    if m in lista:        indice = lista.index(m)        lista[indice] = lista[indice]*2        return lista    else:        return lista                                    